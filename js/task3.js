// const book = {
//     title: "The Last Kingdom",
//     author: "Bernard Cornwell",
//     genres: ["historical prose", "adventure"],
//     isPublic: true,
//     rating: 8.38,
// }

// for (const key in book) {
//     if(book.hasOwnProperty(key)) {
//      console.log(key);
//      console.log(book[key]);
//     }
// }

// const goods = {
//     apples: 6,
//     grapes: 3,
//     bread: 4,
//     cheese: 7,
// };
// console.log(goods);
// const values = Object.values(goods);

// let total = 0;
// for (const value of values) {
//     total += value;
// }

// console.log("–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ —É –∫–æ—Ä–∑–∏–Ω—ñ goods", total)



// const books = [
//     {
//       title: "The Last Kingdom",
//       author: "Bernard Cornwell",
//       rating: 8.38,
//     },
//     {
//       title: "–ù–∞ –±–µ—Ä–µ–∑—ñ —Å–ø–æ–∫—ñ–π–Ω–∏—Ö –≤–æ–¥",
//       author: "–†–æ–±–µ—Ä—Ç –®–µ–∫–ª—ñ",
//       rating: 8.51,
//     },
//     {
//       title: "–°–æ–Ω —Å–º—ñ—à–Ω–æ—ó –ª—é–¥–∏–Ω–∏",
//       author: "–§–µ–¥—ñ—Ä –î–æ—Å—Ç–æ—î–≤—Å—å–∫–∏–π",
//       rating: 7.75,
//     },
//   ];

//   for (const book of books) {
//     // –û–±'—î–∫—Ç –∫–Ω–∏–≥–∏
//     console.log(book);
//     // –ù–∞–∑–≤–∞
//     console.log(book.title);
//     // –ê–≤—Ç–æ—Ä
//     console.log(book.author);
//     // –†–µ–π—Ç–∏–Ω–≥
//     console.log(book.rating);
//   }

//   const bookName = [];

//   for (const book of books) {
//     bookName.push(book.title);
//   }

//   console.log("–ú–∞—Å–∏–≤ –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤:", bookName);

//   let totalRating = 0;

//   for (const book of books) {
//     totalRating += book.rating;
//   }
//   const averageRating = (totalRating / books.length).toFixed(1);
//   console.log(averageRating);

// const inputName = 'color';
// const inputValue = 'tomato';

// const colorPickerData = {
//     [inputName] : inputValue,
// }

// console.log(colorPickerData);

// // document.body.style.backgroundColor = colorPickerData.color;
// const a = {x: 1, y: 2};
// const b = a;
// b.c = 9;

// console.log("a", a);
// console.log("b", b);
// console.log(a === b);

// const playlist = {
//     name: "–ú—ñ–π —Å—É–∞–µ–ø –ø–ª–µ–π–ª–∏—Å—Ç",
//     rating: 5,
//     tracks: ['—Ç—Ä–µ–∫-1', '—Ç—Ä–µ–∫-2', '—Ç—Ä–µ–∫-3'],
//     trackCount: 3,
//     chanheName(newName) {
//         this.name = newName;
//     },
//     chenheRating(newRating) {
//         this.rating = newRating;
//     },
//     changeTracks(newTraks) {
//         this.tracks[1] = newTraks;
//     },
//     addTracks(add) {
//         this.tracks.push(add);
      
//     },
//     getTrackCount() {
//         return this.tracks.length;
//     }

// };
// console.log(playlist.getTrackCount());
// playlist.addTracks('–ú—É–ª—è—Ä–µ–ª–∞');
// playlist.changeTracks('–ö–∞–±–∞—á–æ–∫');
// console.log(playlist.getTrackCount());
// playlist.chenheRating(12);
// playlist.chanheName('–ú–µ–≥–∞ —Å—É–ø–µ—Ä –ø–ª–µ–π–ª–∏—Å—Ç');
// console.log(playlist);
// console.log(playlist.tracks)

// const feedback = {
//     good:5,
//     neutral: 10,
//     bad: 3,
// };

// let totalFeedback = 0;

// const values = Object.values(feedback);

// for (const value of values) {
//     totalFeedback += value;
    
// }

// const obj = Object.keys(feedback);

// for (const ob of obj) {
//     console.log(ob);
//     console.log(feedback[ob]);
// }

// console.log(totalFeedback);

// const friends = [
//     { name: 'Mango', online: false },
//     { name: 'Kiwi', online: true },
//     { name: 'Poly', online: true },
//     { name: 'Ajax', online: false },
// ];
// console.table(friends);

// const findFriendByName = function (allFriends, name) {
    
//     for (const friend of allFriends) {
        
        
//         if(friend.name === name) {
//            return `–ó–Ω–∞–π—à–ª–∏!!! ${name}`;
//            continue;
//         } 
//     }
//     return `–ù–µ –Ω–∞–π—à–ª–∏ :( ${name}`;
// };

// console.log(findFriendByName(friends, 'Poly'));
//   console.log(findFriendByName(friends, 'Chelsy'));

// const getAllName = function (allFriends) {
//     const names = [];
//     for (const friend of friends) {
//         names.push(friend.name);
//     }
    
//     return names;
// }
// console.log(getAllName(friends));

// const getOnlineFriends = function (allFriends) {
//     const onlineFriends = [];
//     for (const friend of friends) {
//         if(friend.online) {
//             onlineFriends.push(friend);
//         } 
//     }
//     return onlineFriends;
// }

// console.table(getOnlineFriends(friends));

// const getOfflineFriends = function (allFriends) {
//     const offlineFriends = [];
//     for (const friend of friends) {
//         if(!friend.online) {
//             offlineFriends.push(friend);
//         } 
//     }
//     return offlineFriends;
// }

// console.table(getOfflineFriends(friends));

// const getFriendsByOnlineStatus = function (allFriend) {
//     const friendByStatus = {
//         online: [],
//         offline: [],
//     };

//     for (const friend of friends) {
//         if(!friend.online) {
//             friendByStatus.offline.push(friend);
//             continue;
//         } 
//             friendByStatus.online.push(friend);
        
//     }
//     return friendByStatus;
// };

// console.log(getFriendsByOnlineStatus(friends));

// const x = {
//     a: 1,
//     b: 2,
//     c: 50,
//     d: 100,
// }

// let total = 0;

// const value = Object.values(x);
// console.log(value)

// for (const el of value) {
//     total += el;
// }
// console.log(total);

// const playlist = {
//     name: "–ú—ñ–π —Å—É–ø–µ—Ä –ø–ª–µ–π–ª—ñ—Å—Ç",
//     rating: 5,
//     tracks: ['Numb', 'In TheEnd', 'Faint'],
//     getName(newName) {
//         this.name = newName
//     },
//     addTrack(newT) {
//         this.tracks.push(newT);
//     },
//     getTrackCount() {
//         return this.tracks.length;
//     }
// };

// // const keys = Object.keys(playlist);
// // console.log(keys)

// // for(const key of keys) {
// //     console.log(key)
// //     console.log(playlist[key])
// // }

// const value = Object.values(playlist);
// for(const val of value) {
//     console.log(val)
// }

// const friends = [
//     { name: "Mango", online: false },
//     { name: "Kiwi", online: true },
//     { name: "Poly", online: true },
//     { name: "Ajax", online: false },
// ];

// const findFriendByName = function (allFriend, friendName) {

//     for(const friend of allFriend) {
//      console.log(friend);
//      console.log(friend.name)
//        if(friend.name === friendName) {
//          return `–Ñ —Ç–∞–∫–∏–π –¥—Ä—É–≥ ${friendName}`;
//        }
//     }
//     return ` –¢–∞–∫–æ–≥–æ –¥—Ä—É–≥–∞ ${friendName} –Ω–µ–º–∞—î`;
//  };

//  console.log(findFriendByName(friends, "Poly"));
// const friendNameArr = [];
// const getAllNames = function (allFriend) {
    
//     for(const friend of allFriend) {
        
//         friendNameArr.push(friend.name);
//     }
//     return friendNameArr;
// }

// getAllNames(friends);
// console.log(friendNameArr);

// const getOnlineFriends = function (allFriend) {
//     const onlineFriends = [];
//     for(const friend of allFriend) {
//         if(friend.online) {
//             onlineFriends.push(friend.name);
//         }
//     }
//     return onlineFriends;
// }

// console.log(getOnlineFriends(friends));

//  const getOnlineFriends = function (allFriend) {
//     const friendsByStatus = {
//         online: [],
//         offline: [],
//     };
//     for(const friend of allFriend) {
//         const key = friend.online ? "online" : "offline";
//         friendsByStatus[key].push(friend);
//     }
//     return friendsByStatus;
// }

// console.log(getOnlineFriends(friends));

// const cart = {
//     item: [],
//     getItems() {},
//     add(product) {
//         this.item.push(product);
//     },

//     remove(productName) {
        
//        for(const item of this.item) {
//         const removeItem = this.item.indexOf(item);
//         const idx = Object.values(item);

//         if(idx.includes(productName)) {
            
//             this.item.splice(removeItem, 1);  
//         }
//        }
//     },

//     clear() {
//         this.item = [];
//     },

//     countTotalPrice() {
//         let total = 0;
//         for(const price of this.item) {
//             console.log(price)
//         }
//     }, 

//     increaseQuantity(productName) {},

//     decreaseQuantity(productName) {},
// };

// cart.add({ name: "üçé", price: 50 });
// cart.add({ name: "üçã", price: 60 });
// cart.add({ name: "üçá", price: 70 });
// cart.add({ name: "üçì", price: 110 });

// console.log(cart.item);
// console.log(cart.remove("üçì"));
// console.log(cart.remove("üçá"));
// console.log(cart.remove("üçé"));
// console.log(cart.item);

// cart.add({ name: "üçì", price: 110 });
// console.log(cart.item);

// console.log(cart.countTotalPrice())

// ========================================================

// const user = {
//     name: 'Mango',
//     age: 20,
//     hobby: 'html',
//     premiun: true,
// };

// user.mood = 'happy';
// user.hobby = 'skydiving';
// user['premiun'] = false;

// console.log(user);

// for(const key in user) {
//     console.log(`${key} : ${user[key]}`)
// }

// const keys = Object.keys(user);
// for(const key of keys) {
//     console.log(`${key} : ${user[key]}`)
// }
// let sum = 0;

// const salary = {
//     John: 100,
//     Ann: 160,
//     Pete: 130,
// };

// const salaryValues = Object.values(salary);
// console.log(salaryValues);

// for(const item of salaryValues) {
//     sum += item;
// }

// console.log(sum)

// for(const key in salary) {
//     sum += salary[key];
// }
// console.log(sum)

// –Ω–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é calcTotalPrise(stones, stoneName), —è–∫–∏–π –ø—Ä–∏–π–º–∞—î –º–∞—Å–∏–≤ –æ–±—î–∫—Ç—ñ–≤ —Ç–∞ —Ä—è–¥–æ–∫
// –∑ –Ω–∞–∑–≤–æ—é –∫–∞–º–µ–Ω—é. –§—É–Ω–∫—Ü—ñ—è —Ä–∞—Ö—É—î —ñ –ø–æ–≤–µ—Ä—Ç–∞—î –∑–∞–≥–∞–ª—å–Ω—É –≤–∞—Ä—Ç—ñ—Å—Ç—å –∫–∞–º—ñ–Ω–Ω—è –∑ —Ç–∞–∫–∏–º —ñ–º—è–º, —Ü—ñ–Ω–æ—é —Ç–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –∑ –æ–±—î–∫—Ç–∞

// const stones = [
//     {
//         name: '–°–º–∞—Ä–∞–≥–¥',
//         price: 1300,
//         quantity: 4,
//     },
//     {
//         name: '–î—ñ–∞–º–∞–Ω—Ç',
//         price: 2700,
//         quantity: 3,
//     },
//     {
//         name: '–°–∞–ø—Ñ—ñ—Ä',
//         price: 400,
//         quantity: 7,
//     },
//     {
//         name: '–©–µ–±—ñ–Ω—å',
//         price: 200,
//         quantity: 2,
//     },
// ];

// function calcTotalPrise(stones, stoneName) {
//     let sum = 0;
//     for(const stone of stones) {
//         for(const key in stone) {
//             if(stone[key] === stoneName) {
//                 sum = stone['price'] * stone['quantity']
//             }
//         }
//     }
//     return sum;
// }

// function calcTotalPrise(stones, stoneName) {
//     for(const stone of stones) {
//         if(stone.name === stoneName) {
//             return stone.price * stone.quantity;
//         }
//     }
//     return "–¢–∞–∫–æ–≥–æ –∫–∞–º–µ–Ω—é –Ω–µ –º–∞—î";
// }

// console.log("–°—É–º–∞ –∑–∞ –°–º–∞—Ä–∞–≥–¥",calcTotalPrise(stones, '–°–º–∞—Ä–∞–≥–¥'));
// console.log("–°—É–º–∞ –∑–∞ –°–∞–ø—Ñ—ñ—Ä",calcTotalPrise(stones, '–°–∞–ø—Ñ—ñ—Ä'));
// console.log("–°—É–º–∞ –∑–∞ –î—ñ–∞–º–∞–Ω—Ç",calcTotalPrise(stones, '–î—ñ–∞–º–∞–Ω—Ç'));
// console.log("–°—É–º–∞ –∑–∞ –©–µ–±—ñ–Ω—å",calcTotalPrise(stones, '–©–µ–±—ñ–Ω—å'));
// console.log(calcTotalPrise(stones, '–ü—Å—î—á–∏–π'));

// Example 4
// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –æ—Å–æ–±–∏—Å—Ç–∏–º –∫–∞–±—ñ–Ω–µ—Ç–æ–º —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç –±–∞–Ω–∫—É. 
// –Ñ –æ—é—î–∫—Ç account –≤ —è–∫–æ–º—É –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –º–µ—Ç–æ–¥ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –±–∞–ª–∞–Ω—Å–æ–º —Ç–∞ —ñ—Å—Ç–æ—Ä—ñ—î—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π

// —Ç–∏–ø–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –≤—Å–±–æ–≥–æ –¥–≤–∞
// –º–æ–∂–Ω–∞ –ø–æ–∫–ª–∞—Å—Ç–∏ —á–∏ –∑–Ω—è—Ç–∏ –≥—Ä–æ—à—ñ –∑ —Ä–∞—Ö—É–Ω–∫—É

const Transaction = {
    DEPOSIT: 'deposit',
    WITHDRAW: 'withdraw',
};

Object.freeze(Transaction);


const account = {
    // –ø–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å
    balance:0,

    // —ñ—Å—Ç–æ—Ä—ñ—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
    transactions: [],

    // –º–µ—Ç–æ–¥ —Å—Ç–≤–æ—Ä—é—î —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –æ–±—î–∫—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
    // –ø—Ä–∏–π–º–∞—î —Å—É–º—É —Ç–∞ —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
    createTransaction(amount, type) {
        return {
            id: Date.now(),
            amount,
            type,
        }
    },

    // –º–µ—Ç–æ–¥ —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Å—É–º–∏ –¥–æ –±—Ñ–ª—Ñ–Ω—Å—É.
    // –ø—Ä–∏–π–º–∞—î —Å—É–º—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
    // –≤–∏–∫–ª–∏–∫–∞—î createTransaction –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±—î–∫—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
    // –ø—ñ—Å–ª—è —á–æ–≥–æ –¥–æ–¥–∞—î –π–æ–≥–æ –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
    deposit (amount) {
        if(amount <= 0) {
            return "Error"
        }
        const item = this.createTransaction(amount, Transaction.DEPOSIT);
        this.transactions.push(item);
        this.balance += amount;
    },
    //–º–µ—Ç–æ–¥ —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞ –∑–Ω—è—Ç—Ç—è —Å—É–º–∏ –∑ –±–∞–ª–∞–Ω—Å—É.
    // –ø—Ä–∏–π–º–∞—î —Å—É–º—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
    // –≤–∏–∫–ª–∏–∫–∞—î createTransaction –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±—î–∫—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
    // —è–∫—â–æ amount –±—ñ–ª—å—à–µ –Ω—ñ–∂ –ø–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å –≤–∏–≤–æ–¥–∏—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    // –ø—Ä–æ —Ç–µ —â–æ –∑–Ω—è—Ç—Ç—è —Ç–∞–∫–æ—ó —Å—É–º–∏ –Ω–µ –º–æ–∂–ª–∏–≤—É –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ 
    withdraw(amount) {
        if(amount > this.balance || amount <= 0) {
            return "–Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤";
        }
        const item = this.createTransaction(amount, Transaction.WITHDRAW);
        this.transactions.push(item);
        this.balance -= amount;
    },

    // –º–µ—Ç–æ–¥ –ø–æ–≤–µ—Ä—Ç–∞—î –ø–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å
    getBalance() {
        return this.balance;
    },

    // –º–µ—Ç–æ–¥ —à—É–∫–∞—î —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –æ–±—î–∫—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –ø–æ id
    getTransactionDetails(id) {
        for(const transaction of this.transactions) {
           if(transaction.id === id) {
            return transaction
           }
        }
        return "Empty"
    },

    // –º–µ—Ç–æ–¥ –ø–æ–≤–µ—Ä—Ç–∞—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—à—Ç—ñ–≤ –ø–µ–≤–Ω–æ–≥–æ —Ç–∏–ø—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –∑ —É—Å—ñ—î—ó —ñ—Å—Ç–æ—Ä—ñ—ó
    getTransactionTotal(type) {
        let sum = 0;
        for(const transaction of this.transactions) {
            if(transaction.type === type) {
                sum += transaction.amount
            }
        }
        return sum;
    },
};


// account.deposit(1000);
// account.deposit(1000);

// account.withdraw(260);
// account.withdraw(260);
// account.withdraw(260);

// account.deposit(1000);

// console.log(account.getBalance());

// console.log(account.getTransactionTotal('deposit'))
// console.log(account.getTransactionTotal('withdraw'))



